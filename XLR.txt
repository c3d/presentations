// Factorial
0! -> 1
N! -> N * (N-1)!

// Tests
if true then X else Y  -> X
if false then X else Y -> Y

// LLVM Just-in-Time Code Generator
% xl -B fact.xl
define i64 @"xl.!"(i64 %0) {
data:
  %1 = alloca i64
  %loc = alloca i64
  br label %code
code:
  %2 = sub i64 %0, 1
  %3 = icmp eq i64 0, %2
  br i1 %3, label %good, label %bad
exit:
  %retval = load i64, i64* %1
  ret i64 %retval
done:
  %4 = load i64, i64* %loc
  %5 = mul i64 %0, %4
  store volatile i64 %5, i64* %1
  br label %exit
bad:
  %6 = sub i64 %0, 1
  %7 = call i64 @"xl.!.2"(i64 %6)
  store volatile i64 %7, i64* %loc
  br label %done
good:
  %8 = call i64 @"xl.!.1"()
  store volatile i64 %8, i64* %loc
  br label %done
