presentation_title "Chains of trust in confidential computing - KVM Forum 2023"
presentation_logo "KVM_Forum.png"
presentation_url "https://github.com/c3d/presentations"
presentation_tao "https://github.com/c3d/presentations (branch kvm-2023-chains-of-trust)"
presentation_author "Christophe de Dinechin"
presentation_author_title "Senior Principal Software Engineer"
presentation_author_mail "dinechin@redhat.com"



// ----------------------------------------------------------------------------
main_title_slide "Main title",
// ----------------------------------------------------------------------------
    title
        $ "Chains of trust in"
        $ "Confidential Computing"
    subtitle
        $ "Knowing and verifying what you run"

    title_slide_author "Christophe.jpg",
        $ presentation_author
        $ { italic presentation_author_title }
        font "Overpass Mono"
        $ presentation_author_mail

    title_slide_logo


// ---------------------------------------------------------------------------
base_slide "Agenda",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Key topics we are going to cover today"
    slide_picture "Agenda.jpg", 0%, 320 // https://www.pexels.com/fr-fr/photo/programme-startup-a-faire-concept-7376/
    stepping
    story
        * "Overview of Confidential Computing"
        * "What is Attestation?"
        * "Use cases for Confidential Computing"
        * "From root of trust to actual trust"
        * "Platform-specific details"
        * "Supporting technologies"
        $
        * "See blog for more details"


    right_picture
        images "Complex Mechanism.jpg", "handing-over-keys.jpg", "Hackers.jpg", "Root of Trust.jpg", "Universal Power Adapter.jpg", "Eiffel Tower Foundations.jpg", "QRCode-CoCo-Primer.png"



// ============================================================================
//
section_slide "Confidential Computing",
//
// ============================================================================
    title page_label
    subtitle
        $ "Protecting data in-use"
    stepping
    page_quote 0



// ----------------------------------------------------------------------------
base_slide "Problem Statement",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Why should infrastructure see your data?" fr "Votre hébergeur peut-il voir vos données?"
    slide_picture "Confidential Computing.jpg", 5%, 350
    stepping

    picture
        caption_at CNF_HOST, "Software now runs on hardware you do not own, like a cloud provider" fr "Votre logiciel tourne maintenant sur l'ordi de quelqu'un d'autre"
        caption_at CNF_RESOURCES, "Hardware resources are owned by the host" fr "Les resources matérielles appartiennent en réalité à l'hébergeur qui les loue"
        caption_at CNF_CONTAINERS, "Containers carve out resources from the host" fr "Le conteneurs empruntent les resources dont ils ont besoin à cet hébergeur"
        caption_at CNF_SANDBOX_OUT, "Classical sandboxing only protects the host from the containers running on it" fr "L'isolation classique est conçue pour protéger l'hébergeur des conteneurs"
        caption_at CNF_SANDBOX_IN, "The host can freely peek inside the container, for example read its memory" fr "À l'inverse, l'hébergeur peut tout à fait regarder dans un conteneur"
        caption_at CNF_TENANTS, "For that reason, multiple tenants do not want to share hardware when processing sensitive data" fr "Des concurrents ne voudront pas partager le même matériel pour des données sensibles"
        caption_at CNF_SAFE_TODAY, "Data on disk or in network is already encrypted today, so the VM host cannot read it nor tamper with it" fr "Les données sur disque ou réseau sont déjà chiffrées aujourd'hui, donc OK"
        caption_at CNF_MEMORY_VM, "In non-CC architectures, data in memory is not encrypted, so it can be accessed by the host" fr "Pour les données en mémoire vive, il faut le nouveau matériel"
        caption_at CNF_MEMORY_HOST, "Encrypted memory stores live data as cypher text, so that it becomes garbled when read by the host" fr "Les données ainsi protégées deviennent illisibles pour l'hébergeur"
        caption_at CNF_INTEGRITY, "Integrity ensures the host cannot corrupt nor poison CPU state or RAM contents" fr "Il faut aussi protéger l'intégrité de l'état du CPU ou de la mémoire"
        caption_at CNF_ATTESTATION, "Attestation proves where you are running and what you are running" fr "L'attestation permet de contrôler ce qui tourne, mais aussi où ça tourne"
        confidential integer(smooth_step + 0.5)



// ----------------------------------------------------------------------------
base_slide "Root of Trust",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "First there was the hardware"
    slide_picture "TPM_Asus.jpg", 5%, 350
    stepping

    picture
        tpm_step        1, "#F00", -300, "Root of Trust (TPM)"
        tpm_step        2, "#F40", -200, "ROM-based boot"
        tpm_step        3, "#444", -100, "BIOS Phase 1"
        tpm_step        4, "#448",    0, "BIOS Phase 2"
        tpm_step        5, "#24C",  100, "Boot Manager"
        tpm_step        6, "#00F",  200, "Linux Kernel"
        tpm_step_final  7, "#080",  300, "Workload"

        tpm_step Step, Color, Y, Label ->
            locally
                at_step 3*Step - 1
                locally
                    translate_y Y
                    color "transparent"
                    line_color Color
                    line_width 8
                    path
                        move_to 300, 20
                        line_to 350, 20
                        line_to 350, 80
                        line_to 300, 80
                        endpoints_style "none", "arrowhead"
                text_box 570, Y + 50, 400, 90,
                    align 0%
                    vertical_align 50%
                    style "story"
                    color Color
                    font_size 30
                    text "Measures and launches"
            locally
                at_step 3*Step + 1
                locally
                    translate_y Y
                    color "transparent"
                    line_color Color
                    line_width 8
                    path
                        move_to -300, 100
                        line_to -350 - 30 * Step, 100
                        line_to -350 - 30 * Step, -300 - Y - Y / 10
                        line_to -300, -300 - Y - Y / 10
                        endpoints_style "none", "arrowhead"
                text_box -470, Y + 50, 400, 90,
                    align 100%
                    vertical_align 50%
                    style "story"
                    color Color
                    font_size 30
                    text "Records"
            tpm_step_final Step, Color, Y, Label
        tpm_step_final Step, Color, Y, Label ->
            at_step 3 * Step - 3
            framed_box Color, 0, Y, 600, 90, { render Label }


// ----------------------------------------------------------------------------
base_slide "Trust domains",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Example: confidential containers"
    slide_picture "Confidential - Top Secret.png", 5%, 300
    stepping

    kata_containers integer(KC_CONFIDENTIAL + smooth_step + 0.5)
    on "pageentry",
        skip_to CC_PLATFORM

    contents 0,
        at_step CC_PLATFORM
        talk_frame
            color "#C22"
            rectangle 0, 7, 50, 20
            bold " Trusted platform: " fr " Plateforme sécurisée: "
            color "black"
            $ "Offers confidentiality guarantees enforced by hardware cryptography" fr "Offre des garanties de sécurité à l'aide de cryptographie matérielle"
            at_step CC_HOST
            color "#24C"
            rectangle 0, 7, 50, 20
            bold " Host: " fr " Hébergeur: "
            color "black"
            $ "Manages and offers resources used to run containers (CPU, memory, I/O, etc)" fr "Gère et présente les resources pour les conteneurs (CPU, mémoire, E/S, etc)"
            at_step CC_TENANT
            color "#2A2"
            rectangle 0, 7, 50, 20
            bold " Tenant: " fr " Locataire: "
            color "black"
            $ "Confidential area, inaccessible to the host even when running on it" fr "Environnement confidentiel, inaccessible à l'hébergeur même lorsqu'elle l'utilise"


// ----------------------------------------------------------------------------
base_slide "Guarantees",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "What does confidential computing really provide?"
    slide_picture "Magic Smoke.jpg", 5%, 300
    stepping

    story
        * "Confidential computing is about... confidentiality"
        * "Protect data in use from leaks or tampering"
        $
        * "Does not protect against crashes"
        * "Does not protect disk, network data, ..."
        * "Does not offer any guarantee of service"
        * "Hardware-based, real-time cryptography"
        * "Is highly implementation-dependent"
        $
        * "TL;DR: There is no automatic security"

    right_picture
        images "Nosy Neighbour.jpg", "No SELinux.jpg", "MacOS Bomb.jpg", "Hard Disk Fail.jpg", "Customs.jpg", "Canal+ Scrambled.jpg", "SEV-SNP.jpg", "Road Rage.jpg"


// ============================================================================
//
section_slide "What is Attestation?",
//
// ============================================================================
    title page_label
    subtitle
        $ "Proving that you run"
        $ "what you want to run"
        $ "where you want to run it"


// ----------------------------------------------------------------------------
base_slide "A little bit of terminology",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "The RATS model (from IETF)"
    slide_picture "Measuring.png", 3%, 300
    stepping

    picture
        // image 0, 0, 100%, 100%, "RATS Model.png"
        translate_y -120

        at_step 1
        framed_box "#F80",    0,    0,  890, 130, "Verifier"

        at_step 2
        framed_box "#0C0", -300,  300,  290, 130, "Endorser"
        at_step 3
        varrow_with_text   -300,  250,  50, "Endorsements"

        at_step 4
        framed_box "#0C0",    0,  300,  290, 130, "Reference Value Provider"
        at_step 5
        varrow_with_text      0,  250,  50, "Reference values"

        at_step 6
        framed_box "#0C0",  300,  300,  290, 130, "Verifier owner"
        at_step 7
        varrow_with_text    300,  250,  50, "Appraisal policy (evidence)"

        at_step 8
        framed_box "#C00", -750,    0,  290, 130, "Attester"
        at_step 9
        harrow_with_text   -620,    0, -420,  "Evidence"

        at_step 10
        framed_box "#00C",  750,    0,  290, 130, "Relying party"
        at_step 11
        harrow_with_text    420,    0,  620,  "Attestation results"
        at_step 12
        framed_box "#00C",  750,  300,  290, 130, "Relying party owner"
        at_step 13
        varrow_with_text    750,  250,   50, "Appraisal policy (attestation results)"

varrow_with_text X, Y1, Y2, Label ->
    locally
        line_width 6
        line_color "black"
        color "transparent"
        line_arrow X, Y1, none, X, Y2, arrowhead

    text_box X - 160, (Y1+Y2)/2, 300, 90,
        style "story"
        font_size 30
        align 100%
        vertical_align 30%
        render Label

harrow_with_text X1, Y, X2, Label ->
    locally
        line_width 6
        line_color "black"
        color "transparent"
        line_arrow X1, Y, none, X2, Y, arrowhead

    text_box (X1+X2)/2, Y-50, 300, 90,
        style "story"
        font_size 30
        align 50%
        vertical_align 30%
        render Label



 // ----------------------------------------------------------------------------
base_slide "Attestation: Basic concepts",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Offering proofs about the configuration of a system"
    slide_picture "Attestation.jpg", 5%, 300
    stepping

    story
        * "In general, attestation proves a property of a system"
        * "Remote attestation decouples evidence from verification"
        $
        * "Passport check model: present evidence"
        * "Background check mode: validate evidence"

    right_picture
        images "Attestation de déplacement.jpg", "Lock and Key.png"
        only_at 3,
            image -700, -200, 30%, 30%, "Passport model.jpg"

            framed_box "#C00", -150, -200,  290, 130, "Attester"
            varrow_with_text   -200, -150,  150, "Evidence"
            varrow_with_text   -100,  150, -150, "ID"
            framed_box "#00C",  300, -200,  290, 130, "Relying party"
            framed_box "#F80", -150,  200,  290, 130, "Verifier"
            harrow_with_text    -30, -200,  180, "ID"


        only_at 4,
            image -700, -200, 20%, 20%, "Background check.jpg"

            framed_box "#C00", -150, -200,  290, 130, "Attester"
            varrow_with_text    230, -150,  150, "Evidence"
            varrow_with_text    370,  150, -150, "OK?"
            framed_box "#00C",  300, -200,  290, 130, "Relying party"
            framed_box "#F80",  300, 200,   290, 130, "Verifier"
            harrow_with_text    -30, -200,  180, "Evidence"


// ----------------------------------------------------------------------------
base_slide "REMITS pipeline",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "A simplified (simplistic?) model of trust chains"
    slide_picture "Oversimplified.png", 3%, 300
    stepping

    picture
        at_step 1
        trust_letter 0, 0, "R"
        root_of_trust   { bold "Root of trust"  ; small "Certificates" }
        at_step 2
        trust_letter 1, 35, "E"
        endorsement     { bold "Endorsement"    ; small "Signing keys" }
        at_step 3
        trust_letter 2, 120, "M"
        measurement     { bold "Measurement"    ; small "Hashes" }
        at_step 4
        trust_letter 3, 180, "I"
        identity        { bold "Identity"       ; small "Reference values" }
        at_step 5
        trust_letter 4, 210, "T"
        trust           { bold "Trust"          ; small "Policies" }
        at_step 6
        trust_letter 5, 280, "S"
        secrets         { bold "Secrets"        ; small "Encryption keys" }



// ----------------------------------------------------------------------------
base_slide "REMITS pipeline examples",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Some simple applications of the REMITS pipeline"
    slide_picture "Complex Installation.jpg", 3%, 300
    stepping

    picture
        translate 120, 200, 0
        scale 80%

        at_step 1
        category_label  "Secure Boot"
        root_of_trust   "TPM"
        endorsement     "Manufacturer"
        measurement     "Firmware, bootloader"
        identity        "Signed attestation report"
        trust           "Attestation policies"
        secrets         "Cloud API secret"

        at_step 2
        translate_y -250
        category_label  "Selling a property"
        root_of_trust   "Notary"
        endorsement     "Signed records"
        measurement     "Deed or affidavit"
        identity        "Property description"
        trust           "I got your money"
        secrets         "Handing the keys"

        at_step 3
        translate_y -250
        category_label  "Historical money"
        root_of_trust   "Gold or silver"
        endorsement     "Government"
        measurement     "Market value"
        identity        "Number of dollars"
        trust           "Handing over cash"
        secrets         "Getting food or goods"

    category_label Label ->
        text_box -1100, 0, 300, 200,
           style "boxtitle"
           align 100%
           vertical_align 50%
           render Label


// ----------------------------------------------------------------------------
base_slide "Attestation",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Measuring what we run using cryptography" fr "Mesurer pour contrôler ce qui tourne"
    slide_picture "Measuring.png", 3%, 300
    stepping

    kata_containers integer(KC_ATTEST + smooth_step + 0.5)
    contents 0,
        at_step 1
        talk_frame
            at_step AT_PREATTEST
            color "#C22"
            bold "Preattestation: " fr "Pré-attestation: "
            color "black"
            $ "Measure the payload before allowing it to start (original SEV)" fr "Mesure le contenu avant d'autoriser l'exécution (SEV)"

            at_step AT_POSTATTEST
            color "#C62"
            bold "Postattestation: " fr "Post-attestation: "
            color "black"
            $ "Code in the payload can confirm its identity using the measurement in order to get secrets" fr "Le code peut s'identifier à l'aide d'une mesure pour obtenir des secrets"

            at_step AT_WORKLOAD
            color "#2A2"
            bold "Workload attestation" fr "Attestation de contenu"
            color "black"
            $ "The workload itself is attested, e.g. gets secrets from attestation" fr "L'application ne se lance qu'après attestation (par ex. parce qu'elle a reçoit des secrets de l'attestation)"



// ============================================================================
//
section_slide "Use Cases",
//
// ============================================================================
    title page_label
    subtitle
        $ "Various ways to deploy"
        $ "confidential computing"

// ----------------------------------------------------------------------------
base_slide "Confidential Computing Use Cases",
// ----------------------------------------------------------------------------
    title "Use Cases"
    subtitle "From virtual machine to whole clusters"
    slide_picture "container-vantaggi.png", 5%, 300
    stepping

    story
        * "Base: Confidential Virtual Machines"
        * "Functions: Confidential Workloads (krunvm)"
        * "Orchestrated: Confidential Containers"
        * "Enchilada: Confidential Clusters"

    right_picture
        images (if seconds / 2 mod 2 = 0 then "Confidential VM.png" else "Confidential VM.jpg"),"Confidential Workload.png","Confidential Containers.png","Confidential Cluster.png"


// ----------------------------------------------------------------------------
base_slide "Confidential Virtual Machines",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "The basic technology behind it all"
    slide_picture "Confidential VM.png", 5%, 300
    stepping

    story
        * "New hardware / firmware ABI with new features"
        * "Host kernel no longer trusted, exposes new devices"
        * "Hypervisor no longer trusted, exposes new features"
        * "VM becomes a confidential enclave"
        * "Guest firmware and boot sequence is measured"
        * "Guest kernel can be measured"

    right_picture
        at_step 1
        framed_box "#610",     0, -300, 400, 80, "Firmware / Hardware"
        at_step 2
        framed_box "#921",     0, -200, 400, 80, "Host Linux kernel"
        at_step 3
        framed_box "#E21",     0, -100, 400, 80, "Hypervisor (qemu)"
        at_step 4
        framed_box "#3C6",     0,  160, 400, 400, "VM (Linux)"
        at_step 5
        framed_box "#386",     0,   20, 380, 80, "Guest firmware"
        at_step 6
        framed_box "#386",     0,  120, 380, 80, "Guest kernel"


// ----------------------------------------------------------------------------
base_slide "Confidential Workloads",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Lightweight, quick, container-like"
    slide_picture "Heavy Workload.jpg", 5%, 300
    stepping

    story
        * "VM as a library (libkrun)"
        * "Direct integration with Podman"
        * "Got very early support for SEV"
        * "First working attestation"

    right_picture
        on "pageexit",
            movie_drop KRUNVM_MOVIE
        movie -100, 0, 30%, 30%, KRUNVM_MOVIE

KRUNVM_MOVIE -> "movies/krunvm.mov##input-repeat=-1"

// ----------------------------------------------------------------------------
base_slide "Confidential Containers with Kata",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Using confidential VMs as a Kubernetes runtime"
    slide_picture "Confidential - Top Secret.png", 5%, 300
    stepping

    kata_containers integer(KC_CONFIDENTIAL + smooth_step + 0.5)
    contents 0,
        at_step CC_PLATFORM
        talk_frame
            color "#C22"
            rectangle 0, 7, 50, 20
            bold " Trusted platform: " fr " Plateforme sécurisée: "
            color "black"
            $ "Offers confidentiality guarantees enforced by hardware cryptography" fr "Offre des garanties de sécurité à l'aide de cryptographie matérielle"
            at_step CC_HOST
            color "#24C"
            rectangle 0, 7, 50, 20
            bold " Host: " fr " Hébergeur: "
            color "black"
            $ "Manages and offers resources used to run containers (CPU, memory, I/O, etc)" fr "Gère et présente les resources pour les conteneurs (CPU, mémoire, E/S, etc)"
            at_step CC_TENANT
            color "#2A2"
            rectangle 0, 7, 50, 20
            bold " Tenant: " fr " Locataire: "
            color "black"
            $ "Confidential area, inaccessible to the host even when running on it" fr "Environnement confidentiel, inaccessible à l'hébergeur même lorsqu'elle l'utilise"


// ----------------------------------------------------------------------------
base_slide "Confidential Clusters",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Running an entire cluster inside confidential enclaves"
    slide_picture "Confidential VM.png", 5%, 300
    stepping

    story
        * "Make the whole cluster confidential"
        * "Works at the cloud provider level"
        * "Generates confidential nodes"
        * "Attested TLS (ATLS)"
        * "JoinService: Attest nodes"
        * "VerificationService: User-facing"


    right_picture
        on "pageexit",
            movie_drop CONSTELLATION_MOVIE
        movie -100, 0, 30%, 30%, CONSTELLATION_MOVIE

CONSTELLATION_MOVIE -> "movies/Constellation.mp4##input-repeat=-1"




// ============================================================================
//
section_slide "Building actual trust",
//
// ============================================================================
    title page_label
    subtitle
        $ "Keeping the trust alive along the way"


// ----------------------------------------------------------------------------
base_slide "How does attestation work?" fr "Comment marche l'attestation",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Challenge / response to deliver secrets" fr "Question / Réponse pour donner les secrets"
    slide_picture "Customs.jpg", 3%, 300
    stepping

    kata_containers integer(KC_MSMTS + smooth_step + 0.5)
    contents 0,
        at_step 1
        talk_frame
            at_step MS_MEASURING
            bold "Cryptographic measurement: " fr "Mesure cryptographique "
            $ "Measurement of relevant memory performed by hardware / firmware" fr "Memory is measured by hardware / firmware"
            at_step MS_CHALLENGE
            bold "Cryptographic challenge: " fr "Vérification cryptogrpahique "
            $ "Send proof of identity (salted)" fr "Envoi d'une preuve d'identité (avec nonce)"

            at_step MS_KEY_DELIVERY
            bold "Secret delivery " fr "Révéler des secrets "
            $ "Ensure the workload cannot do harm if not attested" fr "Guarantir que le contenu est inoffensif avant attestation"

            at_step MS_REMOTE
            bold "Remote attestation: " fr "Attestation distante "
            $ "Can invalidate workloads e.g. if compromized" fr "Peut invalider un contenu vulnérable"


// ----------------------------------------------------------------------------
base_slide "Attestation flow",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Unlock workloads by giving secrets"
    slide_picture "Water Flow.jpg", 5%, 300
    stepping

    story
        * "Attester sends request"
        * "Response is a cryptographic challenge"
        * "Attester presents crypted evidence"
        * "Evidence relayed to verifier"
        * "Attestation result returned"
        * "Secrets retrieved"
        * "Response sent to attester"

    right_picture
        translate_y 100
        scale 80%
        framed_box "#C00", -150,   0,  290, 130, "Attester"
        framed_box "#00C",  300,   0,  290, 130, "Relying party"
        framed_box "#F80",  300, 200,   290, 130, "Verifier"
        framed_box "#04C",  300, -200,  290, 130, "Secrets Broker"

        only_at 1,
            harrow_with_text    -30,    0,  180, "Request"
        only_at 2,
            harrow_with_text    180,    0,  -30, "Challenge"
        only_at 3,
            harrow_with_text    -30,    0,  180, "Evidence"
        only_at 4,
            varrow_with_text    230,   50,  150, "Evidence"
        only_at 5,
            varrow_with_text    370,  150,   50, "Attestation result"
        only_at 6,
            varrow_with_text    370,  -50,  -150, "Get secrets"
        only_at 7,
            harrow_with_text    180,    0,  -30, "Give secrets"

    picture
        translate_y -250
        scale 80%
        at_step 8
        root_of_trust   "Manufacturer root Key"
        endorsement     "Per-Chip endorsement"
        measurement     "Boot-time Memory"
        identity        "What is running"
        trust           "Relying party Policies"
        secrets         "Key to decrypt"


// ----------------------------------------------------------------------------
base_slide "Who proves what to whom?",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Different kinds of proof for different consumers"
    slide_picture "Proofs.jpg", 5%, 300
    stepping

    story
        * "System-facing: System software building a trusted execution environment"
        * "User-facing: User checking if a system is trusted"
        * "Workload-facing: Workload checking if runtime environment is trusted"
        * "Peer-facing: Workloads checking of other workload is trusted"
        * "Cluster-facing: nodes in a cluster check each other"



// ============================================================================
//
section_slide "Platform-specific details",
//
// ============================================================================
    title page_label
    subtitle
        $ "Beyond that point, there be zombies"


// ----------------------------------------------------------------------------
base_slide "Vendor landscape" fr "Les vendeurs et leur offre",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Different vendors with different approaches?" fr "Chaque vendeur a son approche bien à lui"
    slide_picture "Confidential Computing.jpg", 5%, 350
    stepping
    story
        * "AMD: Secure Encrypted Virtualization (SEV)"
        ** "SEV-ES adds Encrypted State (e.g. CPU register file)" fr "SEV-ES rajoute une protection de l'état CPU"
        ** "SEV-SNP adds Secure Nested Pages (integrity protection)" fr "SEV-SNP ajoute une notion d'intégrité"
        * "Intel: Trusted Domain Extensions (TDX)"
        * "IBM S390: Secure Execution (SE)"
        * "Power: Protected Execution Facility (PEF)"
        * "Arm: Confidential Computing Architecture (CCA)"
        * "All these technologies are based on virtualization" fr "Ces technologies sont toutes très virtuelles"
        * "They all work differently" fr "Elles fonctionnent toutes de façon différente"

    right_picture
        images "AMD SEV.png", "SEV-ES.png", "SEV-SNP.jpg", "Intel TDX.png", "S390 SE.jpg", "Power PEF.png", "Arm CCA.png", "Confidential VMs.jpg", "Zombie Apocalypse.jpg"

    right_picture
        entry_time -> 0.0
        if smooth_step < 9 then
            entry_time := page_time
        only_at 9,
            jump_factor -> fade_at(page_time - entry_time, 5)
            show sin(2.5 * time)^2
            translate 100 - 500 * jump_factor, 100 - 100 * fade_out(page_time, 10), 50 + 600 * jump_factor
            scale 1 + 5 * jump_factor + 0.3 * jump_factor * sin(45.3 * time)
            rotate_z 23 * sin((0.21 + 2.1 * jump_factor) * time) * (1.0 - 0.7 * jump_factor) + sin(30.2 * time) * jump_factor
            style "boxtitle"
            color_hsv 20 * time, 1, 1
            line_color "green"
            text_box 0, 0, 300, 200,
                vertical_align 0.5
                align 0.5
                $ "There be zombies!" fr "Des zombies partout!"


// ----------------------------------------------------------------------------
base_slide "AMD SEV",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Secure Encrypted Virtualization"
    slide_picture "Messy Kid.jpg", 5%, 300
    stepping

    story
        * "First generation technology, somewhat flawed"
        * "Provides memory encryption through hardware"
        * "Built on top of virtualization (unlike SME)"
        * "Relies on a separate security processor"
        * "Only features pre-attestation"
        * "Several vulnerabilities gave it a bad reputation"

    right_picture
        at_step 1
        image 0, 0, 50%, 50%, "AMD SEV.png"


// ----------------------------------------------------------------------------
base_slide "AMD SEV-ES and SEV-SNP",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Encrypted State, Secure Nested Pages"
    slide_picture "Cleanup.jpg", 5%, 300
    stepping

    story
        * "ES protects CPU state from tampering"
        * "No major impact on the (pre-) attestation model"
        $
        * "SNP protects against malicious page mapping "
        * "Can get attestation quote from within the guest"
        * "VMPL gives additional protection levels for VMs"
        * "VMPLs enable protected services, e.g. vTPM"

    right_picture
        at_step 4
        image 0, 0, 60%, 60%, "SEV-SNP Attestation.png"


// ----------------------------------------------------------------------------
base_slide "Intel TDX (and SGX)",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Trust Domain Extensions (Software Guard Extensions)"
    slide_picture "Revolving Jail.jpg", 5%, 300
    stepping

    story
        * "SGX is designed to create ""Secure Enclaves"""
        * "TDX is virtualization-based (like AMD-SEV)"
        $
        * "No separate security processor"
        * "New CPU mode, Secure Arbitration Mode (SEAM)"
        * "Various binary modules expose required services"
        * "Attestation performed by a Quoting Enclave"

    right_picture
        images "", "", "", "", "TDX SEAM Modules.png", "TDX Quoting Enclave.png"




// ============================================================================
//
section_slide "Supporting technologies",
//
// ============================================================================
    title page_label
    subtitle
        $ "The flavor is in the details"


// ----------------------------------------------------------------------------
base_slide "How do we get this to work?",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Host, Guest, Firmware and Hypervisor support"
    slide_picture "Bits and Pieces.png", 5%, 300
    stepping

    story
        * "Host and guest Linux kernel support"
        * "Hypervisor support"
        * "Guest firmware support"
        * "Host provisioning and support tools, e.g. sevctl"
        * "Generic key brokering and attestation"
        * "Compatibility layers, virtual TPM, SVSM"
        $
        * "Referring you to the blog for pointers"



// ============================================================================
//
section_slide "Conclusion" fr "Conclusion",
//
// ============================================================================
    title page_label
    subtitle
        $ "Attestation means many different things."


// ---------------------------------------------------------------------------
base_slide "Key takeaways" fr "Ce qu'il faut retenir",
// ----------------------------------------------------------------------------
    title page_label
    subtitle "Attestation? We only scratched the surface!"
    slide_picture "Pile of Cash.png", 0%, 250
    stepping
    story
        * "Confidential Computing is a large collection of technologies"
        * "Attestation can mean very different things even in a same context"
        * "Preserving chains of trust requires careful thinking"
        * "Technologies are not consistent"
        $
        * "Please see blog for more details and links"

    right_picture
        at_step 5
        image 150, 0, 300%, 300%, "QRCode-CoCo-Primer.png"


// ============================================================================
//
section_slide "Thank you" fr "Merci",
//
// ============================================================================
    title page_label
    subtitle "Now is a good time for questions" fr "Il est l'heure de passer aux questions"
    stepping

    contents 0,
        text_box 200, -400, 600, 200,
            style "story"
            font_size 30
            anchor
                color "white"
                image -80, -40, 10%, 10%, "Tao3D.png"
            paragraph "This Tao3D presentation is available at" fr "Cette présentation peut être téléchargée à "
            paragraph presentation_tao

    translate_y -50
    picture
        color "white"
        image 700, -80, 230%, 230%, "QRCode-CoCo-Primer.png"


show_overflow -> 0
key "Control-Shift-O" ->
    show_overflow := 1 - show_overflow
    refresh 0
if show_overflow > 0 then
    import "overflow.ddd"



// ============================================================================
//
//   Overview diagram
//
// ============================================================================
// 0: Your software on hardware
// 1: Your software conflicting with other software
// 2: Operating system: takes control
// 3: Chroot: Carve out your little disk space
// 4: Virtualization: Carve out your whole machine
// 5: qemu
// 6: kvm
// 7: Containers: Carve out the whole thing
// 8: Multiplication of containers
// 9: Docker: declarative software components (dockerd)
// 10: Kubernetes: declarative orchestration (kubelet)
// 11: CRI / CRI-O: Runtime abstraction
// 12: KubeVirt: manage VMs with k8s
// 13: Kata: put containers in their own VM
// 14: qemu-mini

OWS_SW          -> 0
OWS_HW          -> 1
OWS_CLASH       -> 2
OWS_OS          -> 3
OWS_CHROOT      -> 4
OWS_VIRT        -> 5
OWS_QEMU        -> 6
OWS_KVM         -> 7
OWS_CNTN        -> 8
OWS_MANY        -> 9
OWS_DOCKER      -> 10
OWS_K8S         -> 11
OWS_CRI         -> 12
OWS_KVIRT       -> 13
OWS_KATA        -> 14
OWS_MINI        -> 15

overview Step:integer ->
// ----------------------------------------------------------------------------
//   Overview diagram for "simplified overview" slide
// ----------------------------------------------------------------------------
    anim_step Step

    overview_adjust S:real ->
        translate 0, -100 * S, -50 * S
        scale 100% - 30% * S

    locally
        overview_adjust anim(0.0, OWS_SW = 0, OWS_DOCKER = 1)

        locally
            at_step OWS_HW
            soft_box -630, -220, redhat_red2,
                image 0, 0, 60%, 60%, "Hard Disk.png"
            soft_box -210, -220, redhat_red2,
                image 0, 0, 30%, 30%, "CPU.png"
            soft_box 210,  -220, redhat_red2,
                image 0, 0, 30%, 30%, "RAM.png"
            soft_box 630, -220, redhat_red2,
                image 0, 0, 50%, 50%, "Network card.png"

        COUNT -> anim 1.0, OWS_SW = 1, OWS_MANY = 12, OWS_KVIRT = 4, OWS_KATA=8

        ys_x -> anim    0.0, OWS_SW =    0, OWS_CLASH = -630, OWS_VIRT = -630, OWS_CNTN = -630, OWS_KVIRT=-630
        ys_y -> anim    0.0, OWS_SW =    0, OWS_OS    =  220, OWS_VIRT =  250, OWS_CNTN =  220, OWS_KVIRT= 250
        ys_w -> anim 1650.0, OWS_SW = 1650, OWS_CLASH =  400, OWS_VIRT =  400, OWS_CNTN =  400, OWS_KVIRT= 400
        ys_h -> anim  200.0, OWS_SW =  200,                   OWS_VIRT =  150, OWS_CNTN =  200, OWS_KVIRT= 150
        for I in 0..integer(COUNT)-1 loop locally
            translate I * 420 mod 1680 + I / 4 * 30, I / 4 * 50, -I/4 * 200
            show exp(-0.1 * I)
            soft_box ys_x, ys_y, ys_w, ys_h, redhat_blue1, "Your software" fr "Votre logiciel"

        ts_x -> anim 2000.0, OWS_SW = 2000, OWS_CLASH = -210
        ts_y -> anim    0.0, OWS_SW =    0, OWS_OS    =  220
        ts_w -> anim  400.0, OWS_SW =  400
        ts_h -> anim  200.0, OWS_SW =  200
        locally
            show anim (0.0, OWS_SW=0, OWS_CLASH=1, OWS_VIRT=0.5, OWS_CNTN=0)
            soft_box ts_x, ts_y, ts_w, ts_h, redhat_blue2, "Their software" fr "Leur logiciel"
            soft_box ts_x + 420.0, ts_y, ts_w, ts_h, redhat_blue2, "Some software" fr "Un logiciel"
            soft_box ts_x + 840.0, ts_y, ts_w, ts_h, redhat_blue2, "Other software" fr "Un autre logiciel"

        at_step OWS_OS
        os_x -> anim    0.0, OWS_SW =    0
        os_y -> anim    0.0, OWS_SW =    0, OWS_VIRT = -60, OWS_CNTN =   0, OWS_KVIRT=-60
        os_w -> anim 1650.0, OWS_SW = 1650
        os_h -> anim  200.0, OWS_SW =  200, OWS_VIRT = 100, OWS_CNTN = 200, OWS_KVIRT=100
        soft_box os_x, os_y, os_w, os_h, redhat_green1, "Operating system" fr "Système d'exploitation"

        locally
            show anim (0.0, OWS_SW=0, OWS_CHROOT=1, OWS_VIRT=0)
            soft_box -550, 100, 200, 200, redhat_red2,
                paragraph "chroot"
                image 0, 0, 50%, 50%, "Hard Disk.png"

        at_step OWS_VIRT
        vi_x -> anim -630.0, OWS_SW = -630,                 OWS_CNTN = -5000, OWS_KVIRT=-630
        vi_y -> anim   60.0, OWS_SW =   60, OWS_VIRT = 60
        vi_w -> anim  400.0, OWS_SW =  400
        vi_h -> anim  200.0, OWS_SW =  200, OWS_VIRT = 180
        for I in 0..integer(COUNT)-1 loop locally
            translate I * 420 mod 1680 + I / 4 * 30, I / 4 * 50, -I/4 * 200
            show exp(-0.1 * I)
            soft_box vi_x, vi_y, vi_w, vi_h, redhat_orange1, "Virtual Machine" fr "Machine virtuelle"

        vm_x -> anim 0.0, OWS_SW = 0, OWS_VIRT = -630
        vm_y -> anim 0.0, OWS_SW = 0, OWS_VIRT =  180
        vm_s -> anim 1.0, OWS_SW = 1, OWS_VIRT =   25%
        vm_c -> anim 1.0, OWS_SW = 1, OWS_CNTN = 0, OWS_KVIRT=1
        for I in 0..integer(COUNT)-1 loop locally
            translate I * 420 mod 1680 + I / 4 * 30, I / 4 * 50, -I/4 * 200
            translate vm_x, vm_y, 10
            scale vm_s
            soft_box os_x, os_y, os_w * vm_c, os_h * vm_c, redhat_green1, "Operating system" fr "Système d'exploitation"
            soft_box -630, -220, redhat_red2,
                image 0, 0, 60%, 60%, "Hard Disk.png"
            soft_box -210, -220, redhat_red2,
                image 0, 0, 30%, 30%, "CPU.png"
            soft_box 210,  -220, redhat_red2,
                image 0, 0, 30%, 30%, "RAM.png"
            soft_box 630, -220, redhat_red2,
                image 0, 0, 30%, 30%, "Network card.png"

        locally
            show anim (0.0, OWS_SW=0, OWS_QEMU=1, OWS_CNTN=0)
            qe_x -> anim -630.0, OWS_SW = -630, OWS_QEMU = -350, OWS_CNTN=-3000
            qe_y -> anim   60.0, OWS_SW =   60, OWS_QEMU =   50
            qe_w -> anim  400.0, OWS_SW =  400, OWS_QEMU =  300
            qe_h -> anim  180.0, OWS_SW =  180, OWS_QEMU =   80
            soft_box qe_x, qe_y, qe_w, qe_h, redhat_orange2, "qemu/libvirt"

        locally
            show anim (0.0, OWS_SW=0, OWS_KVM=1, OWS_CNTN=0)
            kv_x -> anim -630.0, OWS_SW = -630, OWS_KVM  = -630, OWS_CNTN=-3000
            kv_y -> anim   60.0, OWS_SW =   60, OWS_KVM  =  -30
            kv_w -> anim  400.0, OWS_SW =  400, OWS_KVM  =  300
            kv_h -> anim  180.0, OWS_SW =  180, OWS_KVM  =   80
            soft_box kv_x, kv_y, kv_w, kv_h, redhat_orange3, "kvm"

        at_step OWS_MINI
        qm_x -> anim -630.0, OWS_SW = -630, OWS_MINI= -630
        qm_y -> anim  -20.0, OWS_SW =  -20, OWS_MINI=  -20
        qm_w -> anim  250.0, OWS_SW =  250, OWS_MINI=  250
        qm_h -> anim   80.0, OWS_SW =   80, OWS_MINI=   80
        for I in 0..integer(COUNT)-1 loop locally
            translate I * 420 mod 1680 + I / 4 * 30, I / 4 * 50, -I/4 * 200
            soft_box qm_x, qm_y, qm_w, qm_h, redhat_orange2, "qemu-mini"

    locally
        show anim (0.0, OWS_SW=0, OWS_DOCKER=1, OWS_KVIRT=0, OWS_KATA=1)
        do_x -> anim    0.0, OWS_SW =    0, OWS_DOCKER =    0
        do_y -> anim  300.0, OWS_SW =  300, OWS_DOCKER =  300
        do_w -> anim 1100.0, OWS_SW = 1100, OWS_DOCKER = 1100
        do_h -> anim  200.0, OWS_SW =  280, OWS_DOCKER =  200
        soft_box do_x, do_y, do_w, do_h, redhat_ocean1,
            image 0, 20, 20%, 20%, "Logo-Red_Hat-Marketplace-Operated_By_IBM-B-Standard-RGB.png"

    at_step OWS_K8S
    ku_x -> anim -650.0, OWS_SW = -650, OWS_DOCKER = -750
    ku_y -> anim   30.0, OWS_SW =   30, OWS_DOCKER =   30
    ku_w -> anim  300.0, OWS_SW =  300, OWS_DOCKER =  300
    ku_h -> anim  700.0, OWS_SW =  780, OWS_DOCKER =  700
    soft_box ku_x, ku_y, ku_w, ku_h, redhat_yellow1,
        image 0, 20, 25%, 25%, "OpenShift.png"

    at_step OWS_CRI
    cr_x -> anim -550.0, OWS_SW = -550, OWS_CRI = -550
    cr_y -> anim  -20.0, OWS_SW =  -20, OWS_CRI =  -20, OWS_KVIRT=-120
    cr_w -> anim  200.0, OWS_SW =  200, OWS_CRI =  200
    cr_h -> anim   80.0, OWS_SW =   80, OWS_CRI =   80
    soft_box cr_x, cr_y, cr_w, cr_h, redhat_orange4, "CRI"


// ============================================================================
//
//   Confidential Containers
//
// ============================================================================

CNF_START       -> 0            // Blank
CNF_HOST        -> 1            // Show the host
CNF_RESOURCES   -> 2            // Resources
CNF_CONTAINERS  -> 3            // Containers
CNF_SANDBOX_OUT -> 4            // Sandboxing going out
CNF_SANDBOX_IN  -> 5            // Sandboxing going in
CNF_TENANTS     -> 6            // Multiple tenants
CNF_SAFE_TODAY  -> 7            // What is safe today
CNF_MEMORY_VM   -> 8            // Memory in the guest
CNF_MEMORY_HOST -> 9            // Memory encryption
CNF_INTEGRITY   -> 10           // State integrity
CNF_ATTESTATION -> 11           // Attestation
CNF_LAST        -> 11

confidential Step:integer ->
// ----------------------------------------------------------------------------
//   Overview diagram for "simplified overview" slide
// ----------------------------------------------------------------------------
    anim_step Step

    locally
        light 0
        light_position 50, 50, 120

        rotate_x 10
        rotate_y 10 * sin (0.3 * time)

        locally
            color "lightgray"
            scale fade_at(smooth_step, CNF_HOST)
            cube 0, 0, -150, 1500, 400, 300

            color "black"
            text_box 0,0, 1500, 400,
                style "story"
                align 90%
                vertical_align 95%
                $ "Virtual machine host" fr "Hébergeur de machines virtuelles"

        locally
            color safe_color CNF_ATTESTATION
            translate 0, -270, 0
            scale fade_at(smooth_step, CNF_RESOURCES)
            cube 0, 0, -150, 1500, 100, 300

            color "black"
            text_box 0,0, 1500, 100,
                style "story"
                color "lightgray"
                align 90%
                vertical_align 95%
                $ "Physical resources" fr "Ressources physiques"

            translate -300, 0, 25
            scale 50%
            extrude_depth 20
            extrude_radius 20
            soft_box -630, -20, safe_color CNF_INTEGRITY,
                image 0, 0, 30%, 30%, "CPU.png"
            soft_box -210, -20, safe_color CNF_MEMORY_HOST,
                image 0, 0, 30%, 30%, "RAM.png"
            soft_box  210,  -20, safe_color CNF_SAFE_TODAY,
                image 0, 0, 60%, 60%, "Hard Disk.png"
            soft_box  630, -20, safe_color CNF_SAFE_TODAY,
                image 0, 0, 50%, 50%, "Network card.png"


        locally
            CONTAINERS_COUNT -> anim 0.0, CNF_START=0, CNF_CONTAINERS=12
            for I in  0..integer(CONTAINERS_COUNT)-1 loop locally
                color_hsv I * 37, 80%, 80%
                cube -650 + 120 * I, 0, 100, 100, 100, 100

            at_step CNF_CONTAINERS
            color "black"
            text_box 0, 50, 1500, 100,
                style "story"
                align 50%
                vertical_align 5%
                $ "Containers" fr "Conteneurs"


        locally
            extrude_depth 50
            translate -410, -50, 200
            rotate_x -40
            locally
                color "red"
                rotate_z -90
                scale fade_between(smooth_step, CNF_SANDBOX_OUT, CNF_SANDBOX_IN)
                arrow 0, 0, 100, 100, 50, 60%
                translate_z 20
                rotate_z 45
                cube 0, 0, 0, 120, 10, 10
                rotate_z 90
                cube 0, 0, 0, 120, 10, 10
            locally
                translate 120, 0, 0
                color "green"
                rotate_z 90
                scale fade_between(smooth_step, CNF_SANDBOX_IN, CNF_SANDBOX_IN)
                arrow 0, 0, 100, 100, 50, 60%
                color "white"
                rotate_z 90
                extrude_depth 0
                image 0, 90 + 50 * sin(1.1*time), 10%, 10%, "BlueEyeIcon.png"

        locally
            show fade_between(smooth_step, CNF_TENANTS, CNF_TENANTS)
            translate -120, 0, 150
            for I in 0..3 loop
                image I * -120 - 60, 0, 1%, 1%, "Apple.png"
            image 320, 0, 10%, 10%, "Samsung.png"
            image 520, 0, 10%, 10%, "Samsung.png"

        memory_cone Color, X, Y, Z, Start, Stop, Body ->
            locally
                color Color
                translate X, Y, Z
                locally
                scale fade_between(smooth_step, Start, Stop)
                rotate_y 10 * sin (0.32 * time)
                rotate_x 150
                truncated_cone 0, 0, -200, 100, 100, 400, 0.0
                rotate_x 180
                translate_z 400
                frame_texture 512, 150,
                    color "white"
                    rectangle 999, 999
                    text_box 0, 0, 450, 200,
                        style "story"
                        align 50%
                        vertical_align 50%
                        Body
                texture_transform
                    scale 1, 3, 1
                    translate_y -0.3 * time mod 1
                    texture_wrap true, true
                ellipse 0, 0, 200, 200

        locally
            refresh 0
            memory_cone "lightblue", -290, 0, 120, CNF_MEMORY_VM, CNF_INTEGRITY,
                text "Hello World, value " fr "Hello, la valeur " & integer(time * 40 mod 1000)
                line_break
                text "is absolutely secret!" fr "est un secret!"
            memory_cone "lightgreen", -410, -250, 0, CNF_MEMORY_HOST, CNF_MEMORY_HOST,
                text "h3110 W0r1D; vA1u3 " fr "h3110; 1Ӓ √@Ĺ€ŮŘ " & integer(time * 40 mod 997)
                line_break
                text "15 @B501ùT31y 53cR3t¡" fr "35T ùN 53kŕ37¡"

        only_at CNF_INTEGRITY,
            for I in 0..1 loop locally
                translate -600 + 200 * I, -200 + 20 * sin((3.41 + I) * time), 100

                locally
                    color "white"
                    translate_z 125
                    extrude_depth 20
                    rectangle 0, 120, 180, 120
                    extrude_depth 0
                    text_box 0, 120, 150, 100,
                        font "Menlo", 14
                        color "darkblue"
                        align 0
                        if I = 0 then
                            $ "RAX = 0x0BADDA7A"
                            $ "RCX = 0x0BADC0DE"
                            $ "CR3 = 0xDEADBEEF"
                        else
                            $ "while (*ptr++=0);"
                            $ "if (!dead)"
                            $ "    goto retry;"

                rotate_z -90
                color "red"
                scale fade_between(smooth_step, CNF_INTEGRITY, CNF_INTEGRITY)
                arrow 0, 0, 100, 100, 50, 60%
                color "darkred"
                translate_z 20
                rotate_z 45
                cube 0, 0, 0, 120, 10, 10
                rotate_z 90
                cube 0, 0, 0, 120, 10, 10

        only_at CNF_ATTESTATION,
            color "green"
            font "Arial Unicode MS", 160
            align 50%
            vertical_align 50%
            extrude_depth 55
            translate_z 50
            text_box 700, -210, 100, 100, { text "✓" }
            text_box 700,  250, 100, 100, { text "✓" }
            translate_z 140
            text_box -360,  80, 100, 100, { text "✓" }
            text_box 480,   80, 100, 100, { text "✓" }
            text_box 360,   80, 100, 100, { text "✓" }

     at_step CNF_LAST
     if integer(smooth_step + 0.5) in CNF_MEMORY_VM..CNF_INTEGRITY then refresh 0

     safe_color Limit ->  if integer(smooth_step + 0.5) < Limit then redhat_red1 else "darkgreen"




// ============================================================================
//
//   Utlities
//
// ============================================================================

caption_at TimeSlot, Body ->
// ----------------------------------------------------------------------------
//   Show the caption at the given time
// ----------------------------------------------------------------------------
    only_at TimeSlot,
        soft_box -700, 500, 400, 200, "#444", Body


page_quote N ->
// ----------------------------------------------------------------------------
//   Show a selected quote in a page
// ----------------------------------------------------------------------------
    locally
        show_quotes step
        at_step 1
    on "pageentry",
        show_quote N
    on "pageexit",
        show_quotes_v := 0.0
        show_quotes := 0.0


show_quote N    ->
// ----------------------------------------------------------------------------
//   Show a selected quote from keyboard
// ----------------------------------------------------------------------------
    show_quotes := 1
    quote_step N
    refresh 0.1
    on "pageexit",
        show_quotes_v := 0.0
        show_quotes := 0.0

show_quotes     -> 0.0
show_quotes S   -> show_quotes := S
show_quotes_v   -> 0.0

interpolate 10%, show_quotes, show_quotes_v
if show_quotes_v > 0.0 then
    show show_quotes_v
    quotes
        quote "Kevin Mitnick", "I compromised the confidentiality of their proprietary software to advance my agenda of becoming the best at breaking through the lock."
        quote "Billy Graham", "Confidentiality is the essence of being trusted"
        quote "Gretchen Rubin", "I love cunning containers as much as anyone, but I've found that if I get rid of everything I don't need, I often don't need a container at all."
        quote "Andrew Tannenbaum", "The good thing about standards is", " that there are so many to choose from."
        quote "Edward Teller", "A state-of-the-art calculation requires 100 hours of CPU time on the state-of-the-art computer, independent of the decade."
        quote "Will Durant", "History is always repeating itself,", "but each time the price goes up"

disabled
        quote "Henry Louis Mencken", "For every problem, there is a solution that is simple, clean and wrong"
        quote "Julian Assange", "A nation can't solve", "what the press won't let it perceive"
        quote "Second law of thermodynamics", "Entropy, i.e. disorder,  always increases with time"
        quote  "Perl motto (Larry Wall)", "There is more than one way to do it"
        quote "Richard P. Gabriel", "Get half of the right thing available so that it spreads like a virus. Once people are hooked on it, improve it to 90% of the right thing."
        quote "Fabiano Fidêncio", "Break it properly so that you can fix it properly"

key "q" -> show_quotes (if show_quotes <> 0.0 then 0.0 else 1.0); refresh 0
key "]" -> quote_step := quote_step + 1; refresh 0
key "[" -> quote_step := quote_step - 1; refresh 0



// ============================================================================
//
//    Kata Containers animation
//
// ============================================================================

KC_OPENSHIFT    ->  1
KC_KUBELET      ->  2
KC_CRI          ->  3
KC_RUNC         ->  4
KC_CONTAINER    ->  5
KC_CNI_AND_CSI  ->  6
KC_STORAGE      ->  7
KC_KATA_SHIM    ->  8
KC_HYPERVISOR   ->  9
KC_VM           -> 10
KC_KATA_AGENT   -> 11
KC_KATA_CTR     -> 12
KC_CTR_ECOSYS   -> 13
KC_VM_ISOL      -> 14

KC_CONFIDENTIAL -> KC_VM_ISOL + 1
KC_LINUX_KERNEL -> KC_CONFIDENTIAL + CC_LINUX_KERNEL
KC_FIRMWARE     -> KC_CONFIDENTIAL + CC_FIRMWARE
KC_SHIM_V2      -> KC_CONFIDENTIAL + CC_SHIM_V2
KC_CC_HYPERVISOR-> KC_CONFIDENTIAL + CC_HYPERVISOR
KC_ENCRYPTING   -> KC_CONFIDENTIAL + CC_ENCRYPTING
KC_RELYING      -> KC_CONFIDENTIAL + CC_RELYING
KC_PLATFORM     -> KC_CONFIDENTIAL + CC_PLATFORM
KC_HOST         -> KC_CONFIDENTIAL + CC_HOST
KC_TENANT       -> KC_CONFIDENTIAL + CC_TENANT

CC_LINUX_KERNEL ->  1
CC_FIRMWARE     ->  2
CC_SHIM_V2      ->  3
CC_HYPERVISOR   ->  4
CC_ENCRYPTING   ->  5
CC_RELYING      ->  6
CC_PLATFORM     ->  7
CC_HOST         ->  8
CC_TENANT       ->  9

KC_ENABLEMENT   -> KC_TENANT + 1
KC_HARDWARE     -> KC_ENABLEMENT + HE_HARDWARE
KC_FIRMWARE_CC  -> KC_ENABLEMENT + HE_FIRMWARE_CC
KC_RUNTIME_CC   -> KC_ENABLEMENT + HE_RUNTIME_CC
KC_HYPER_CC     -> KC_ENABLEMENT + HE_HYPER_CC
KC_KERNEL       -> KC_ENABLEMENT + HE_KERNEL
KC_AGENTCC      -> KC_ENABLEMENT + HE_AGENTCC
KC_ENABLEMENT_C -> KC_ENABLEMENT + HE_COMPLETE
HE_HARDWARE     -> 1
HE_FIRMWARE_CC  -> 2
HE_KERNEL       -> 3
HE_RUNTIME_CC   -> 4
HE_HYPER_CC     -> 5
HE_AGENTCC      -> 6
HE_COMPLETE     -> 7

KC_PULLIMAGE    -> KC_ENABLEMENT_C + 1
KC_INSIDE_GUEST -> KC_PULLIMAGE + PI_INSIDE_GUEST
KC_ENCRYPTED    -> KC_PULLIMAGE + PI_ENCRYPTED
KC_API_CHANGE   -> KC_PULLIMAGE + PI_API_CHANGE
KC_PULLIMAGE_C  -> KC_PULLIMAGE + PI_COMPLETE
PI_INSIDE_GUEST -> 1
PI_ENCRYPTED    -> 2
PI_API_CHANGE   -> 3
PI_COMPLETE     -> 4

KC_ATTEST       -> KC_PULLIMAGE_C + 1
KC_PREATTEST    -> KC_ATTEST + AT_PREATTEST
KC_POSTATTEST   -> KC_ATTEST + AT_POSTATTEST
KC_WORKLOAD     -> KC_ATTEST + AT_WORKLOAD
AT_PREATTEST    -> 1
AT_POSTATTEST   -> 2
AT_WORKLOAD     -> 3

KC_MSMTS        -> KC_WORKLOAD + 1
KC_MEASURING    -> KC_MSMTS + MS_MEASURING
KC_CHALLENGE    -> KC_MSMTS + MS_CHALLENGE
KC_KEY_DELIVERY -> KC_MSMTS + MS_KEY_DELIVERY
KC_REMOTE       -> KC_MSMTS + MS_REMOTE
MS_MEASURING    -> 1
MS_CHALLENGE    -> 2
MS_KEY_DELIVERY -> 3
MS_REMOTE       -> 4


transfer_gradient Scale:real, Speed: real ->
// ----------------------------------------------------------------------------
//   Animated gradient for "marching ants" lines
// ----------------------------------------------------------------------------
    linear_gradient 0, 0, 256, 0, 256, 256,
        gradient_color 0%, "darkgray", 0.3
        gradient_color 10%, "darkgray", 0.9
        gradient_color 20%, "lightgray", 0.3
        gradient_color 50%, "white", 0.9
        gradient_color 80%, "darkgray", 0.9
        gradient_color 90%, "lightgray", 0.3
        gradient_color 100%, "darkgray", 0.0
    transfer_gradient Scale, Speed, 0
transfer_gradient Scale:real, Speed:real, Angle:real->
    texture_wrap true, true
    texture_transform
        translate_x -Speed*time mod 1
        rotate_z Angle
        scale_x Scale


marching_ants Step:integer, X:real, Y:real, W:real, H:real ->
// ----------------------------------------------------------------------------
//   Draw marching-ants style box
// ----------------------------------------------------------------------------
    at_anim Step
    if anim_step = Step then
        line_width 16
        linear_gradient 0, 0, 256, 0, 256, 256,
            gradient_color 0%, "darkgray", 0.3
            gradient_color 10%, "gray", 0.9
            gradient_color 20%, "lightgray", 0.3
            gradient_color 50%, "white", 0.9
            gradient_color 80%, "gray", 0.9
            gradient_color 90%, "lightgray", 0.3
            gradient_color 100%, "darkgray", 0.0
        locally
            transfer_gradient W / 100, 2.5,  0
            line X-8-W/2, Y+0+H/2, X+8+W/2, Y+0+H/2
        locally
            transfer_gradient H / 100, 2.5, 90
            line X+0+W/2, Y-8+H/2, X+0+W/2, Y+8-H/2
        locally
            transfer_gradient W / 100, 2.5, 180
            line X+8+W/2, Y-0-H/2, X-8-W/2, Y-0-H/2
        locally
            transfer_gradient H / 100, 2.5, 270
            line X-0-W/2, Y+8-H/2, X-0-W/2, Y-8+H/2
    else
        line_width 8
        rectangle X, Y, W, H


security_frame Color, DarkColor, X, Y, W, H, Icon, IconScale ->
// ----------------------------------------------------------------------------
//   Draw a little yellow/black box with a padlock
// ----------------------------------------------------------------------------
    background 0,
        line_width 4
        line_color Color
        color "transparent"
        translate_z 2
        rectangle X, Y, W, H
        line_color DarkColor
        rectangle X, Y, W+10, H+10
        rectangle X, Y, W-10, H-10
        color "white"
        line_color "transparent"
        translate_z 5
        image X + W/2, Y + H/2, IconScale, IconScale, Icon

SECURITY_TOP    -> anim 60.0, KC_PREATTEST=60, KC_POSTATTEST=150, KC_WORKLOAD=360
SECURITY_Y      -> (SECURITY_TOP - 40) / 2
SECURITY_H      -> (SECURITY_TOP + 40)
ATTESTATION_TARGET_Y -> anim 0.0, 0=-130, KC_POSTATTEST=10, KC_WORKLOAD=200
RELYING_X       -> anim 1100.0, 0=1100, KC_ATTEST=800


kata_containers Step:integer ->
// ----------------------------------------------------------------------------
//   Representation of kata containers
// ----------------------------------------------------------------------------
    picture
        anim_step Step
        adjust_diagram

        if Step < KC_MSMTS then
            at_anim KC_OPENSHIFT
            image -700, 370, 12%, 12%, "Logo-Red_Hat-Marketplace-Operated_By_IBM-B-Standard-RGB.png"
            at_anim KC_KUBELET
            framed_box "#38E", -700, 300, 300, 80, "Kubelet"
            at_anim KC_CRI
            framed_box "#38E", -250, -300, 1200, 80, "CRI (cri-o or containerd)" fr "CRI (cri-o ou containerd)"
            locally
                line_color "#38E"
                line_width 15
                line_arrow -700, 280, none, -700, -280, arrowhead

            at_anim KC_RUNC
            framed_box "#14A",  -300, -200, 400, 80, "Runtime (runc)"
            at_anim KC_CONTAINER
            framed_box "#026",  -300, -50, 400, 200, ""
            framed_box "#026",  -300, -50, 380, 180, "Container" fr "Conteneur"

            at_anim KC_CNI_AND_CSI
            framed_box "#38E",  490, -300, 220, 80, "CNI"
            framed_box "#38E",  740, -300, 220, 80, "CSI"
            image 490, -220, 40%, 40%, "Network card.png"
            image 740, -220, 50%, 50%, "Hard Disk.png"

        if Step < KC_ATTEST then
            at_anim KC_STORAGE
            locally
                line_color anim_text("#38E", KC_ENCRYPTING = "#3A5")
                color anim_text("#38E", KC_ENCRYPTING = "#3A5"), 80%
                line_width 5
                rounded_rectangle 740, 120, 160, 140, 20

            locally
                color "#CDF"
                image 760, 140, 40%, 40%, "Hard Disk.png"
                image 740, 120, 40%, 40%, "Hard Disk.png"
                image 720, 100, 40%, 40%, "Hard Disk.png"

            locally
                line_color "#38E"
                line_width 15
                line_arrow 740, 60, arrowhead, 740, -180, arrowhead

            text_box 500, 120, 250, 160,
                color "#02B"
                font "Overpass", "Arial", 30
                align 100%
                vertical_align 50%
                if anim_step >= KC_ENCRYPTING then
                    color "#082"
                    $ "Encrypted" fr "Chiffrage des"
                $ "Images &"
                $ "Volumes"

        if Step <= KC_PULLIMAGE_C then
            locally
                at_anim KC_API_CHANGE
                line_color "#A22", 90%
                line_width 15
                line_arrow 320, -280, none, 320, 50, arrowhead

        at_anim KC_KATA_SHIM
        framed_box anim_text("#1A4", KC_SHIM_V2 = "#A21"),   150, -200, 400, 80, "Runtime (shim-v2)"
        at_anim KC_HYPERVISOR
        framed_box anim_text("#061", KC_CC_HYPERVISOR = "#610"),   150, -100, 400, 80, "Hypervisor (qemu)"
        at_anim KC_VM
        locally
            framed_box "#3C6",   150, 160, 420, 400, { vertical_align 100%; $ "VM (Linux)" }
            at_anim KC_KATA_AGENT
            framed_box "#062",   150, 100, 400,  80, "Kata Agent"
            at_anim KC_KATA_CTR
            framed_box "#062",   150, 250, 400, 200, ""
            framed_box "#062",   150, 250, 380, 180, "Container" fr "Conteneur"
            if Step = KC_PREATTEST then
                locally
                    color "white", 0.8 + 0.1 * sin(5 * time)
                    line_color "transparent"
                    texture ""
                    rectangle 150, 160, 430, 430
                    color "white"
                    rectangle 150, 250, 430, 350


        if Step < KC_MSMTS then
            at_anim KC_LINUX_KERNEL
            framed_box "#E22",     0, -400, 1700, 80, "Linux kernel" fr "Noyau Linux"
            at_anim KC_FIRMWARE
            framed_box "#811",     0, -500, 1700, 80, "Firmware / Hardware" fr "Microgiciel / Matériel"

        only_at_anim KC_PREATTEST..KC_WORKLOAD,
            security_frame "yellow", "black", 150, SECURITY_Y, 415, SECURITY_H, "Padlock-16.png", 30%
        only_at_anim KC_MEASURING..KC_KEY_DELIVERY,
            security_frame "yellow", "black", 150, SECURITY_Y, 415, SECURITY_H, "Padlock-16.png", 30%
        only_at_anim KC_PREATTEST..KC_WORKLOAD,
            line_color "#E22"
            color "transparent"
            line_width 20
            line_arrow 320, ATTESTATION_TARGET_Y, arrowhead, 320, -470, arrowhead
            marching_ants KC_PREATTEST, 150, -100, 400, 80

        at_anim KC_RELYING
        locally
            line_color "#0A4"
            color "#0A4", 20%
            translate RELYING_X, 250, 0
            path
                move_to 0, 100
                for I in 1..16 loop
                   quad_to (230 + 5 * sin I) * sin((I - 0.5) * pi / 8), (120 + 7 * sin I) * cos((I - 0.5) * pi / 8), 200 * sin(I * pi / 8), 100 * cos(I * pi / 8)
        if Step <= KC_PULLIMAGE then
            locally
                line_color "#0A4"
                line_width 8
                line_arrow 350, 250, arrowhead, 920, 250, arrowhead

        text_box RELYING_X - 20, 250, 300, 80,
            style "story"
            font_size 30
            color "#081"
            align 0.0
            vertical_align 0.5
            $ "Relying party" fr "Contrôleur"
        show 0.99
        framed_box "#0A4",   150 + RELYING_X, 300, 280, 80, {font_size 26; text "Key broker" fr "Accès aux clefs" }
        framed_box "#0A4",   150 + RELYING_X, 200, 280, 80, {font_size 26; text "Attestation service" fr "Serveur d'attestation" }

        if Step <= KC_ENABLEMENT_C then
            background -50,
                line_color "#E22"
                color "transparent"
                marching_ants KC_HARDWARE,      0, -500, 1700, 80
                marching_ants KC_FIRMWARE_CC,   0, -500, 1700, 80
                marching_ants KC_KERNEL,        0, -400, 1700, 80
                marching_ants KC_RUNTIME_CC,  150, -200, 400, 80
                marching_ants KC_HYPER_CC,    150, -100, 400, 80
                line_color "#082"
                marching_ants KC_AGENTCC,     150, 100, 400,  80

        if Step <= KC_PULLIMAGE_C then
            at_anim KC_INSIDE_GUEST
            locally
                transfer_gradient (920-350)*0.01, -2.5
                line_color "#0A4"
                line_width 8
                line_arrow 350, 250, arrowhead, 920, 250, arrowhead
            locally
                translate 920 - 300 * page_time mod 570, 250, 10
                image 0, 0, 20%, 20%, "Container Package.png"

            at_anim KC_ENCRYPTED
            locally
                transfer_gradient (520-350)*0.01, 2.5/ 3
                line_color "#0A4"
                line_width 8
                line_arrow 350, 100, arrowhead, 520, 100, arrowhead
            locally
                translate 350 + 100 * page_time mod 170, 100, 10
                image 0, 0, 10%, 10%, "Container Package.png"

            at_anim KC_API_CHANGE
            locally
                translate -720, 0, 0
                rotate_z 90
                text_box 0, 10, 300, 80,
                    style "story"
                    align 0.5
                    vertical_align 0.5
                    font_size 35
                    code "PullImage"

        only_at_anim KC_CHALLENGE,
            image 440 + time * 0.5 mod 1 * (RELYING_X - 290), -20, 0.8,0.8, "ID Card.jpg"
            line_width 15
            line_color "#0A4"
            color "transparent"
            path
                endpoints_style none, arrowhead
                move_to 350,             100
                line_to 150 + RELYING_X, 100
                line_to 150 + RELYING_X, 180
            line_color "#082"
            marching_ants KC_CHALLENGE, 150 + RELYING_X, 200, 280, 80

        only_at_anim KC_KEY_DELIVERY,
            line_width 15
            line_color "#0A4"
            color "transparent"
            path
                endpoints_style arrowhead, none
                move_to 350,             100
                line_to 150 + RELYING_X, 100
                line_to 150 + RELYING_X, 280
            line_color "#082"
            marching_ants KC_KEY_DELIVERY, 150 + RELYING_X, 300, 280, 80
            line_width 0
            color "white"
            image 440 + time * -0.5 mod 1 * (RELYING_X - 290), 20, 0.4,0.4, "Keys.png"

        only_at_anim KC_REMOTE,
            line_width 15
            line_color "#F33"
            color "transparent"
            path
                endpoints_style arrowhead, none
                move_to 350,             100
                line_to 150 + RELYING_X, 100
                line_to 150 + RELYING_X, 160
            line_color "#F33"
            marching_ants KC_REMOTE, 150 + RELYING_X, 200, 280, 80
            line_width 0
            color "white"
            image 440 + time * -0.5 mod 1 * (RELYING_X - 290), 20, 0.4,0.4, "T1000 Just Says No.jpg"


// Position of the "Talk box"
TALK_X          -> anim   650.0
TALK_Y          -> anim  -70.0, KC_CONFIDENTIAL=-180
TALK_W          -> anim  500.0
TALK_H          -> anim  600.0, KC_CONFIDENTIAL= 540
TALK_O          -> anim   50.0

talk_frame Body ->
// ----------------------------------------------------------------------------
//   Display the "talk" frame
// ----------------------------------------------------------------------------
    locally
        line_color "black"
        line_width 2
        color "white", 0.8
        rectangle TALK_X, TALK_Y, TALK_W + TALK_O, TALK_H + TALK_O
    text_box TALK_X, TALK_Y, TALK_W, TALK_H,
        style "story"
        vertical_align 30%
        font_size 32
        Body


// Adjustment to the main diagram
DIAGRAM_Scale   -> anim  1.0, 0=1, KC_CTR_ECOSYS=  75%, KC_CONFIDENTIAL=100%, KC_LINUX_KERNEL= 80%, KC_RELYING=  75%, KC_MSMTS= 100%
DIAGRAM_X       -> anim  0.0, 0=0, KC_CTR_ECOSYS=-300,  KC_CONFIDENTIAL=0,    KC_LINUX_KERNEL=  0,  KC_RELYING=-280,  KC_MSMTS= -800
DIAGRAM_Y       -> anim  0.0, 0=0,                      KC_CONFIDENTIAL=0,    KC_LINUX_KERNEL=110,  KC_RELYING= 100,  KC_MSMTS=    0

adjust_diagram ->
// ----------------------------------------------------------------------------
//   Adjust the position of the diagram
// ----------------------------------------------------------------------------
    // writeln "Step=", anim_step, " Scale=", DIAGRAM_Scale, " X=", DIAGRAM_X, " Y=", DIAGRAM_Y
    translate DIAGRAM_X, DIAGRAM_Y, 0
    scale DIAGRAM_Scale



// ============================================================================
//
//   REMITS diagram
//
// ============================================================================

root_of_trust Label     -> trust_step 0, 0, Label
endorsement Label       -> trust_step 1, 35, Label
measurement Label       -> trust_step 2, 120, Label
identity Label          -> trust_step 3, 180, Label
trust Label             -> trust_step 4, 210, Label
secrets Label           -> trust_step 5, 280, Label
small Label             -> font_size 30; $ Label

trust_step Step, Hue, Label ->
    locally
        translate_x Step * 300 - 720
        color_hsv Hue, 80%, 70%, 90%
        line_color_hsv Hue, 80%, 50%, 90%
        line_width 8
        path
            move_to -110,   0
            line_to -170,  80
            line_to  110,  80
            line_to  170,   0
            line_to  110, -80
            line_to -170, -80
            line_to -110,  0
        line_width 0
        color "white"
        text_box 20, 0, 250, 120,
            style "story"
            color "white"
            vertical_align 50%
            render Label

trust_letter Step, Hue, Letter ->
    locally
        light 0
        light_position 1000, 1000, 1000
        translate Step * 300 - 720, 250, 1500 * fade_out_at(smooth_step, Step+1)
        rotate_y 15 * sin (0.5 * time + 3 * Step)
        rotate_x 15 * sin (0.71 * time + 5 * Step)
        text_box 0, 0, 100, 100,
            extrude_depth 30
            extrude_radius 5
            color_hsv Hue, 80%, 70%, 99%
            font "Arial", 180
            render Letter
